import telebot
from bs4 import BeautifulSoup as bs
import requests # as req
import json
from flask import Flask, request
import os
from global_names import *
import math
from database import FakeOrm

#session = req.Session()
#session.headers = {'user-agent': CHROME_WIN_UA}

# –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ, —Ç–æ TEST_TOKEN, –∏–Ω–∞—á–µ TOKEN
TOKEN = TOKEN
bot = telebot.TeleBot(TOKEN)

KEYBOARD_TO_ACC = telebot.types.ReplyKeyboardMarkup(True)
KEYBOARD_TO_ACC.row('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
KEYBOARD_TO_ACC.row('–£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∞')


# –ø–∞—Ä—Å–∏—Ç —Å—Ä–∞–Ω—ã–π html
def authenticate_with_login(user):
    """Logs in to instagram."""
    session = requests.Session()
    '''
    session.headers = {'user-agent': CHROME_WIN_UA}
    session.headers.update({'Referer': BASE_URL, 'user-agent': STORIES_UA})
    req = session.get(BASE_URL)

    session.headers.update({'X-CSRFToken': req.cookies['csrftoken']})

    login_data = {'username': LOGIN, 'password': PASSWORD}
    login = session.post(LOGIN_URL, data=login_data, allow_redirects=True)
    session.headers.update({'X-CSRFToken': login.cookies['csrftoken']})
    login_text = json.loads(login.text)
    print(login_text)
    '''
    session.headers.update({'Referer': BASE_URL, 'user-agent': STORIES_UA})
    req = session.get(BASE_URL)

    session.headers.update({'X-CSRFToken': req.cookies['csrftoken']})

    session.headers.update({'user-agent': CHROME_WIN_UA})
    autication = True
    if autication == True:#login_text.get('authenticated') and login.status_code == 200:
        session.headers.update({'user-agent': CHROME_WIN_UA})
        print('–£–¥–∞—á–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è')
        print('–ü—Ä–æ–±—É—é –≤–∑—è—Ç—å –∏–Ω—Ñ—É')
        ask = session.get(BASE_URL+user)
        soup = bs(ask.text, 'html.parser')
        body = soup.find('body')
        script = body.find('script', text=lambda t: t.startswith('window._sharedData'))

        page_json = script.text.split(' = ', 1)[1].rstrip(';')
        data_json = json.loads(page_json)
        print('–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª')
    else:
        print('Login failed for ' + LOGIN)
        #print('–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ', login.status_code)
    return data_json


# —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
def toFixed(numObj, digits=0):
    return f"{numObj:.{digits}f}"


# —Å—á–∏—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞
def rating_count(user_info):
    followers = user_info['followed_by']
    try:
        comments_count = sum([comment['comments'] for comment in user_info['photos_data']])
        comments_percent = comments_count / 12 / followers
    except TypeError:
        comments_percent = 0

    try:
        likes_count = sum([like['likes'] for like in user_info['photos_data']])
        likes_percent = likes_count / 12 / followers
    except TypeError:
        likes_percent = 0
    try:
        all_times = [time['time'] for time in user_info['photos_data']]
        periods = []
        for period in all_times:
            try:
                periods.append(period - all_times[all_times.index(period) + 1])
            except IndexError:
                break
        if periods == []:
            mean_time = 0
        else:
            mean_time = 1 / sum(periods) / 11 / 60 / 60 / 24
    except TypeError:
        mean_time = 0
    rating = math.sqrt(((followers ** 2) * ((1 + likes_percent * 0.8 + comments_percent * 0.2) * (1 + mean_time)) ** 2) + (followers ** 2))/1000
    return rating


# –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–±–∏—Ä–∞–µ—Ç –≤—é –∏–Ω—Ñ—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
def take_info(user):
    PERSONAL = '''
üíé Telegram Name : {tg_log}
üíéInstagram Name: {inst_log}
üî∏–¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è: {type}

üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ : {followers}
‚ù£–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤: {mean_like}
üìä–†–µ–π—Ç–∏–Ω–≥ : {rating}

üìùBio: *–í –†–ê–ó–†–ê–ë–û–¢–ö–ï*
Hashtags : *–í –†–ê–ó–†–ê–ë–û–¢–ö–ï*

–û–¥–æ–±—Ä–µ–Ω *–í –†–ê–ó–†–ê–ë–û–¢–ö–ï*
'''
#üì®–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: *–í –†–ê–ó–†–ê–ë–û–¢–ö–ï*
    database_connecter = FakeOrm()
    message = user
    user = user.text
    database_connecter.tg_id = message.from_user.id
    database_connecter.tg_log = message.from_user.username
    database_connecter.inst_log = user
    user_id = 1
    answer = authenticate_with_login(user)
    if answer == {}:  # –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=KEYBOARD_TO_ACC)
        return None
    else:
        try:
            followed_by = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_followed_by']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            edge_follow = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_follow']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            content_count = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_owner_to_timeline_media']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∞–∫–∫–µ
            if answer['entry_data']['ProfilePage'][0]['graphql']['user']['is_business_account']:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫ –±–∏–∑–Ω–µ—Å
                business_category = answer['entry_data']['ProfilePage'][0]['graphql']['user']['business_category_name']  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞
                category_enum = answer['entry_data']['ProfilePage'][0]['graphql']['user']['category_enum']  # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            else:
                business_category = None
                category_enum = None
            if answer['entry_data']['ProfilePage'][0]['graphql']['user']['is_private']:  # –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã–π
                photos = None
            else:
                photos = []
                for edge in answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_owner_to_timeline_media']['edges']:
                    data = {
                        'comments':edge['node']['edge_media_to_comment']['count'],
                        'time':edge['node']['taken_at_timestamp'],
                        'likes':edge['node']['edge_liked_by']['count']
                            }
                    # –∫–æ–º–º–µ–Ω—Ç—ã, –≤—Ä–µ–º—è, –ª–∞–π–∫–∏ 
                    photos.append(data)
            needed = {
                'user_id':user_id, 'user_login':user, 
                'followed_by':followed_by, 'subscribed_to':edge_follow, 
                'publications':content_count, 'business_category':business_category, 
                'subcategory':category_enum, 'photos_data':photos
            }
            user_id += 1
            rating = rating_count(needed)
            needed['user_rating'] = rating
            likes_count = sum([like['likes'] for like in needed['photos_data']])
            mean_like = likes_count / 12
            database_connecter.profile_type = needed['subcategory']
            database_connecter.followers = needed['followed_by']
            database_connecter.mean_likes = int(mean_like)
            database_connecter.rating = toFixed(needed['user_rating'], 4)
            PERSONAL = PERSONAL.format(
                tg_log=message.from_user.username,
                inst_log=user,
                type=needed['subcategory'],
                followers=needed['followed_by'],
                mean_like=int(mean_like),
                rating=toFixed(needed['user_rating'], 4)
            )
            database_connecter.telegram_insert()
            bot.send_message(message.chat.id, PERSONAL, reply_markup=KEYBOARD_TO_ACC)
        except KeyError:
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç', reply_markup=KEYBOARD_TO_ACC)


def friends_rating(user):
    PERSONAL = '''
üíéInstagram Name: {inst_log}
üî∏–¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è: {type}

üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ : {followers}
‚ù£–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤: {mean_like}
üìä–†–µ–π—Ç–∏–Ω–≥ : {rating}
        '''
    message = user
    user = user.text
    user_id = 1
    answer = authenticate_with_login(user)
    if answer == {}:  # –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=KEYBOARD_TO_ACC)
        return None
    else:
        try:
            followed_by = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_followed_by']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            edge_follow = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_follow']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            content_count = answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_owner_to_timeline_media']['count']  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∞–∫–∫–µ
            if answer['entry_data']['ProfilePage'][0]['graphql']['user']['is_business_account']:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫ –±–∏–∑–Ω–µ—Å
                business_category = answer['entry_data']['ProfilePage'][0]['graphql']['user']['business_category_name']  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞
                category_enum = answer['entry_data']['ProfilePage'][0]['graphql']['user']['category_enum']  # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            else:
                business_category = None
                category_enum = None
            if answer['entry_data']['ProfilePage'][0]['graphql']['user']['is_private']:  # –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã–π
                photos = None
            else:
                photos = []
                for edge in answer['entry_data']['ProfilePage'][0]['graphql']['user']['edge_owner_to_timeline_media']['edges']:
                    data = {
                        'comments':edge['node']['edge_media_to_comment']['count'],
                        'time':edge['node']['taken_at_timestamp'],
                        'likes':edge['node']['edge_liked_by']['count']
                            }
                    # –∫–æ–º–º–µ–Ω—Ç—ã, –≤—Ä–µ–º—è, –ª–∞–π–∫–∏ 
                    photos.append(data)
            needed = {
                'user_id':user_id, 'user_login':user, 
                'followed_by':followed_by, 'subscribed_to':edge_follow, 
                'publications':content_count, 'business_category':business_category, 
                'subcategory':category_enum, 'photos_data':photos
            }
            user_id += 1
            rating = rating_count(needed)
            needed['user_rating'] = rating
            likes_count = sum([like['likes'] for like in needed['photos_data']])
            mean_like = likes_count / 12
            PERSONAL = PERSONAL.format(
                inst_log=user,
                type=needed['subcategory'],
                followers=needed['followed_by'],
                mean_like=int(mean_like),
                rating=toFixed(needed['user_rating'], 4)
            )
            bot.send_message(message.chat.id, PERSONAL, reply_markup=KEYBOARD_TO_ACC)
        except KeyError:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=KEYBOARD_TO_ACC)
